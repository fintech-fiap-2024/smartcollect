name: CI/CD do Projeto SmartCollect

on:
  push:
    branches:
      - main
      - dev

env:
  DOCKER_IMAGE_NAME: geovani237/smartcollect-esg
  DOCKER_REGISTRY: docker.io
  TAG: ${{ github.sha }}

jobs:
  build_and_test:
    name: Build e Testes com Maven (Oracle Integration)
    runs-on: ubuntu-latest

    services:
      oracle-db:
        image: container-registry.oracle.com/database/free:latest
        ports:
          - 1521:1521/tcp
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Setup JDK 21 e Cache Maven
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Esperar a Inicialização do Oracle DB (Health Check de Porta)
        run: |
          echo "Aguardando 15 segundos iniciais para o contêiner Oracle ligar..."
          sleep 15
          
          # Instala o netcat (nc), necessário para o health check
          sudo apt-get update && sudo apt-get install -y netcat
          
          # Testa a conexão da porta a cada 6 segundos, com timeout (30 tentativas = 180s)
          for i in $(seq 1 30); do
            nc -z oracle-db 1521
          
            if [ $? -eq 0 ]; then
              echo "A porta 1521 do Oracle DB está aberta. Prosseguindo."
              exit 0
            fi
          
            echo "Tentativa $i falhou. Porta 1521 ainda não está aberta. Aguardando 6 segundos..."
            sleep 6
          done
          
          echo "Erro: A porta 1521 do Oracle DB não abriu após múltiplas tentativas (timeout)."
          exit 1

      - name: Executar Build e Testes (Conectando ao Oracle DB)
        env:
          SPRING_DATASOURCE_URL: jdbc:oracle:thin:@oracle-db:1521/FREEPDB1
          SPRING_DATASOURCE_USERNAME: SYSTEM
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.ORACLE_TEST_PASSWORD }}
        run: mvn clean install

      - name: Upload JAR como Artefato
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/smartcollect-0.0.1-SNAPSHOT.jar

  build_push_docker:
    name: Build e Push da Imagem
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/
      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build e Push da Imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy_staging:
    name: Deploy para Staging
    needs: build_push_docker
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/dev'
    environment: staging

    steps:
      - name: Acessar Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Simulação de Deploy na Azure (Ambiente Staging)
        run: |
          echo "---------------------------------------------------------"
          echo "SIMULAÇÃO DE DEPLOY: AMBIENTE STAGING (Branch: ${{ github.ref_name }})"
          echo "A imagem mais recente (tag: ${{ env.TAG }}) seria implantada na Azure."
          echo "Comandos de Deploy (Simulação):"
          echo "  > docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
          echo "  > az webapp deployment source config --name smartcollect-staging --resource-group meu-grupo-rg --container-image-name ${{ env.DOCKER_IMAGE_NAME }}"
          echo "---------------------------------------------------------"

  deploy_production:
    name: Deploy para Produção
    needs: deploy_staging
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://smartcollect.simulacao.com

    steps:
      - name: Acessar Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Simulação de Deploy na Azure (Ambiente Produção)
        run: |
          echo "---------------------------------------------------------"
          echo "SIMULAÇÃO DE DEPLOY: AMBIENTE PRODUÇÃO (Branch: ${{ github.ref_name }})"
          echo "Após aprovação manual, a imagem mais recente (tag: ${{ env.TAG }}) seria implantada na Azure."
          echo "Comandos de Deploy (Simulação):"
          echo "  > docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
          echo "  > az webapp deployment source config --name smartcollect-production --resource-group meu-grupo-rg --container-image-name ${{ env.DOCKER_IMAGE_NAME }}"
          echo "---------------------------------------------------------"