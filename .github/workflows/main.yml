name: CI/CD do Projeto SmartCollect

# O pipeline é disparado sempre que houver um push na branch 'main'
on:
  push:
    branches:
      - main

env:
  # Nome da Imagem no Docker Hub - Use seu nome de usuário em minúsculas
  DOCKER_IMAGE_NAME: geovani237/smartcollect-esg
  DOCKER_REGISTRY: docker.io
  TAG: ${{ github.sha }}

jobs:
  # 1. BUILD E TESTES AUTOMATIZADOS (CI)
  build_and_test:
    name: Build e Testes com Maven (Oracle Integration)
    runs-on: ubuntu-latest

    # =========================================================================
    # SERVICE CONTAINERS: INICIA O ORACLE DB PARA TESTES DE INTEGRAÇÃO
    # =========================================================================
    services:
      # O nome 'oracle-db' se torna o HOST que o Spring Boot usará
      oracle-db:
        image: container-registry.oracle.com/database/free:latest
        ports:
          - 1521:1521/tcp # Mapeia a porta
        environment:
          # A senha do container Oracle é definida pela Secret
          ORACLE_PWD: ${{ secrets.ORACLE_TEST_PASSWORD }}
        # Espera que o banco de dados esteja pronto (healthy) para rodar os testes
        options: >
          # CORREÇÃO: Usamos aspas duplas (") ao redor da Secret no health-cmd
          --health-cmd "sqlplus sys/\"${{ secrets.ORACLE_TEST_PASSWORD }}\"@//localhost:1521/FREEPDB1 AS SYSDBA -S <<< 'SELECT 1 FROM DUAL;' && exit 0 || exit 1"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 12

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4
      - name: Setup JDK 21 e Cache Maven
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Executar Build e Testes (Conectando ao Oracle DB)
        # As variáveis de ambiente sobrescrevem a configuração local (localhost)
        env:
          # A URL APONTA PARA O NOME DO SERVIÇO: 'oracle-db'
          SPRING_DATASOURCE_URL: jdbc:oracle:thin:@oracle-db:1521/FREEPDB1
          SPRING_DATASOURCE_USERNAME: SYSTEM
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.ORACLE_TEST_PASSWORD }}
        run: mvn clean install

      - name: Upload JAR como Artefato
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/smartcollect-0.0.1-SNAPSHOT.jar

  # 2. BUILD E PUSH DA IMAGEM DOCKER
  build_push_docker:
    name: Build e Push da Imagem
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/
      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build e Push da Imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  # =========================================================================
  # 3. SIMULAÇÃO DE DEPLOY EM STAGING
  # =========================================================================
  deploy_staging:
    name: Simulação de Deploy em Staging
    needs: build_push_docker
    runs-on: ubuntu-latest
    environment: staging # Mantém o uso do ambiente

    steps:
      - name: Acessar Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Simulação de Deploy
        run: |
          echo "Simulando a conexão ao servidor de STAGING..."
          echo "1. Pull da imagem mais recente: ${{ env.DOCKER_IMAGE_NAME }}:latest"
          # Comando para "baixar" a imagem no ambiente de simulação
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          
          echo "2. Criação do arquivo .env com a senha segura (ORACLE_STAGING_PWD)."
          echo "3. Executando 'docker compose up' no STAGING..."
          echo "Deploy do ambiente STAGING concluído com sucesso."
          echo "A aplicação SmartCollect está rodando em http://staging.simulacao.com:8081" # Exibir URL/mensagem

  # =========================================================================
  # 4. SIMULAÇÃO DE DEPLOY EM PRODUÇÃO (Com Aprovação Manual)
  # =========================================================================
  deploy_production:
    name: Simulação de Deploy em Produção
    needs: deploy_staging
    runs-on: ubuntu-latest
    # Configura o ambiente de produção com REVISOR OBRIGATÓRIO (mantém o fluxo de CD)
    environment:
      name: production
      url: https://smartcollect.simulacao.com # URL para evidência

    steps:
      - name: Acessar Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Simulação de Deploy
        run: |
          echo "SIMULANDO APROVAÇÃO MANUAL PARA PRODUÇÃO..."
          echo "1. Pull da imagem mais recente: ${{ env.DOCKER_IMAGE_NAME }}:latest"
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest

          echo "2. Criação do arquivo .env com a senha ultra-segura (ORACLE_PROD_PWD)."
          echo "3. Executando 'docker compose up' no PRODUÇÃO..."
          echo "DEPLOY FINALIZADO! A aplicação SmartCollect está rodando em produção."
          echo "Verifique o funcionamento em https://smartcollect.simulacao.com" # Mensagem final para evidência
